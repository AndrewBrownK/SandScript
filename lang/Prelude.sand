(def (not x)
  (if x
    False
    True))

(def (null? obj)
     (if (eqv obj '())
       True
       False))

(def (id x)
     x)

(def (flip f)
     (lambda (x y)
       (f y x)))

(def (compose f g)
     (lambda (x)
       (f (g x))))

(def (zero? x)
     (= x 0))

(def (positive? x)
     (> x 0))

(def (negative? x)
     (< x 0))

(def (even? x)
     (= (mod x 2) 0))

(def (foldr f end lst)
     (if (null? lst)
       end
       (f (head lst) (foldr f end (tail lst)))))

(def (foldl f acc lst)
     (if (null? lst)
       acc
       (foldl f (f acc (head lst)) (tail lst))))

(def (reverse lst)
     (foldl (flip cons) '() lst))

(def (map f lst)
     (foldr (lambda (x y) (cons (f x) y)) '() lst))

(def (filter pred lst)
     (foldr (lambda (x y)
              (if (pred x)
                (cons x y)
                y))
            '()
            lst))

