(load "lang/Prelude.sand")

(def tests '())

(defn assert [result expected]
  (set tests (cons (eqv? result expected) tests)))

(trace "Running tests. Will either crash or show number of failed assertions.")

(assert (not true) false)
(assert (not false) true)
(assert (nil? '()) true)
(assert (nil? '(1 2 3)) false)
(assert (list 1 2 3) '(1 2 3))
(assert (empty? []) true)
(assert (empty? [1 2 3]) false)
(assert (id 3) 3)
(assert ((flip cons) '(2 3 4) 1) '(1 2 3 4))
(assert ((partial = 9) 9) true)
(assert ((comp inc dec) 5) 5)
(assert (zero? 0) true)
(assert (zero? 9) false)
(assert (pos? 1) true)
(assert (pos? 0) false)
(assert (neg? ~1) true)
(assert (neg? 0) false)
(assert (odd? 1) true)
(assert (odd? 2) false)
(assert (even? 1) false)
(assert (even? 2) true)
(assert (map inc '(1 2 3)) '(2 3 4))
(assert (map inc [1 2 3]) [2 3 4])
(assert (reduce + 0 '(1 2 3)) 6)
(assert (reduce + 0 [1 2 3]) 6)
(assert (fold + 0 '(1 2 3)) 6)
(assert (fold + 0 [1 2 3]) 6)
(assert (filter even? [0 1 2 3 4]) [0 2 4])
(assert (filter odd? '(0 1 2 3 4)) '(1 3))
(assert (unfold inc ~5 zero?) '(~5 ~4 ~3 ~2 ~1 0))
(assert (sum 1 2 3) 6)
(assert (prod 1 2 3) 6)
(assert (and true true true) true)
(assert (and true true false) false)
(assert (or false false false) false)
(assert (or false false true) true)
(assert (max 1 2 3 4) 4)
(assert (min 1 2 3 4) 1)
(assert (count '(1 2 3)) 3)
(assert (count [1 2 3]) 3)
(assert (reverse '(1 2 3)) '(3 2 1))
(assert (reverse [1 2 3]) [3 2 1])
(assert nil '())
(assert (range 1 3) '(1 2 3))
(assert (v-range 1 3) [1 2 3])
(assert (last (range 1 9)) 9)
(assert (last (v-range 1 9)) 9)
(assert empty [])
(assert (ind 2 [1 2 3]) 3)
(assert (ind 2 '(1 2 3)) 3)
(assert (append '(1 2 3) '(4 5 6) '(7 8 9)) (range 1 9))
(assert (append '(1 2 3) [4 5 6]) (v-range 1 6))
(assert (append [1 2 3] '(4 5 6)) (range 1 6))
(assert (neg 3) ~3)
(assert (neg ~3) 3)
(assert (inc 0) 1)
(assert (inc 0.5) 1.5)
(assert (inc 2/3) 5/3)
(assert (dec 0) ~1)
(assert (dec 1.0) 0.0)
(assert (dec 1/2) ~1/2)
(assert (divides 3 9) true)
(assert (divides 3 8) false)

(def passed (filter-io id tests))

(trace
       (-
        (count tests)
        (count passed)))
'Done
